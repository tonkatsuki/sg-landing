name: Deploy Hugo site to Linode

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker image
        run: |
          docker buildx create --use
          docker buildx build --platform linux/amd64 -t hugo-site:latest --load .

      - name: Install Linode CLI
        run: pip install linode-cli

      - name: Deploy to Linode
        id: deploy
        env:
          LINODE_CLI_TOKEN: ${{ secrets.LINODE_CLI_TOKEN }}
        run: |
          linode-cli linodes list --text --no-headers --filter "label=hugo-site" | awk '{print $1}' | xargs -I{} linode-cli linodes delete {}
          linode-cli linodes create --image linode/alpine3.14 --region us-east --type g6-nanode-1 --label hugo-site --root_pass ${{ secrets.LINODE_ROOT_PASSWORD }}
          sleep 60
          LND_IP=$(linode-cli linodes list --text --no-headers --filter "label=hugo-site" | awk '{print $2}')
          echo "::set-output name=linode_ip::$LND_IP"

      - name: Update Cloudflare DNS
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          CLOUDFLARE_RECORD_ID: ${{ secrets.CLOUDFLARE_RECORD_ID }}
          LINODE_IP: ${{ steps.deploy.outputs.linode_ip }}
        run: |
          curl -X PUT "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/dns_records/$CLOUDFLARE_RECORD_ID" \
          -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
          -H "Content-Type: application/json" \
          --data '{"type":"A","name":"yourdomain.com","content":"'"$LINODE_IP"'","ttl":120,"proxied":false}'

      - name: Deploy Docker Compose
        env:
          LINODE_IP: ${{ steps.deploy.outputs.linode_ip }}
        run: |
          echo 'version: "3"' > docker-compose.yml
          echo 'services:' >> docker-compose.yml
          echo '  hugo-site:' >> docker-compose.yml
          echo '    image: hugo-site:latest' >> docker-compose.yml
          echo '    restart: always' >> docker-compose.yml
          echo '    ports:' >> docker-compose.yml
          echo '      - "80:80"' >> docker-compose.yml
          echo '      - "443:443"' >> docker-compose.yml
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/id_rsa docker-compose.yml root@$LINODE_IP:/root/docker-compose.yml
          docker save hugo-site:latest | ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/id_rsa root@$LINODE_IP 'docker load'
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/id_rsa root@$LINODE_IP "docker-compose up -d"
